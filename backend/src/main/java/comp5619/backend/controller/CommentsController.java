package comp5619.backend.controller;

import comp5619.backend.models.Comments;
import comp5619.backend.repository.CommentRepository;

import java.sql.Time;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import static java.lang.Float.parseFloat;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/comments")
public class CommentsController {

    @Autowired // This means to get the bean called commentRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CommentRepository commentRepository;

    @PostMapping(path = "/addComment")
    public @ResponseBody ResponseEntity<Map<String, Object>> addComment(@RequestBody Map<String, String> params) {

        String content = params.get("content");
        int rating = Integer.parseInt(params.get("rating"));
        int userId = Integer.parseInt(params.get("userId"));
        int serviceId = Integer.parseInt(params.get("serviceId"));

        Date date = new Date();
        Timestamp time = new Timestamp(date.getTime());

        Comments newComment = new Comments();

        newComment.setUserId(userId);
        newComment.setServiceId(serviceId);
        newComment.setContent(content);
        newComment.setRating(rating);
        newComment.setTime(time);

        commentRepository.save(newComment);

        Map<String, Object> response = new HashMap<>();

        response.put("Message", "Create Comment Success");
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @GetMapping(path = "/getCommentsById/{id}")
    public @ResponseBody ResponseEntity<List<Map<String, Object>>> getCommentsById(@PathVariable(name = "id") String id) {
        List<Map<String, Object>> result = commentRepository.getCommentsById(id);
        if (result.size() == 0) {
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(result);
        }
        return ResponseEntity.status(HttpStatus.OK).body(result);
    }


    //This method is used for tests, delete comments on service id
    @PostMapping(path = "/deleteComments")
    public @ResponseBody ResponseEntity<Object> deleteCommentsOnServiceId(@RequestBody Map<String, String> params) {

        String id = params.get("service_id");

        List<Map<String,Object>> result = commentRepository.getCommentsById(id);

        if (result.size() == 0) {
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("No Content Found");
        }

        commentRepository.deleteCommentsOnServiceId(id);

        return ResponseEntity.status(HttpStatus.OK).body("Delete Comments On Service ID: "+id+" Success");
    }
}
